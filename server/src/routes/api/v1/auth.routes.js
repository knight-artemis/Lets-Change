const router = require('express').Router();
const bcrypt = require('bcrypt');
const { checkUser, secureRoute } = require('../../../../miiddleWares/common');
const mailer = require('../../../../nodeMailer')

const { User } = require('../../../../db/models');

router.get('/checkSession', async (req, res) => {
  const { user } = req.session;
  if (user) res.json(req.session.user);
  else res.json({ id: 0, firstName: '', email: '' });
});

router.post('/reg', secureRoute, async (req, res) => {
  try {
    const { firstName, email, password } = req.body;
    const user = await User.findOne({ where: { email } });
    if (user) {
      res.json({ err: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    } else {
      const hash = await bcrypt.hash(password, 10);
      const newUser = await User.create({
        firstName,
        email,
        password: hash,
      }).then((resp) => resp.get({ plain: true }));
      delete newUser.password;
      req.session.user = { ...newUser };
      req.session.save(() => {
        res.status(201).json(newUser);
        const message = {
          to: email,
          subject: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ "–î–∞–≤–∞–π –º–µ–Ω—è—Ç—å—Å—è"',
          text: `

        –î–æ–±—Ä—ã–π –¥–µ–Ω—å!

        –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ "–î–∞–≤–∞–π –º–µ–Ω—è—Ç—å—Å—è". –ù–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –≤—ã —Å —É–¥–æ–±—Å—Ç–≤–æ–º –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω—ã–µ –í–∞–º –≤–µ—â–∏ –Ω–∞ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏ –ø–æ–ª–µ–∑–Ω–æ–µ.

        –ö—Ä–∞—Ç–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–∏–º —Å–µ—Ä—Å–∏–≤–æ–º –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:

        1. –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –≤–µ—â—å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –æ–±–º–µ–Ω.

        2. –î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑—É—á–∞–µ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –º–æ–∂–µ—Ç –µ–≥–æ –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å.

        3. –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –Ω–∞ –í–∞—à –æ–±–º–µ–Ω —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å, –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –≤—Å—Ç—Ä–µ—á–µ –∏ —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω.

        –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –±—É–¥–µ—Ç –¥–ª—è –í–∞—Å –ø—Ä–∏—è—Ç–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º!

        –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
        –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ "–î–∞–≤–∞–π –º–µ–Ω—è—Ç—å—Å—è".

        `,
        }
        mailer(message)
      });
    }
  } catch (error) {
    console.log(error);
    res.status(500).json({ err: { server: '–æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' } });
  }
});

router.post('/log', secureRoute, async (req, res) => {
  try {
    const { email, password } = req.body;
    const rawUser = await User.findOne({ where: { email } });
    if (!rawUser) {
      res.status(401).json({ err: { email: '–Ω–µ –≤–µ—Ä–Ω—ã–π e-mail' } });
    } else {
      const user = rawUser.get({ plain: true });
      const checkPass = await bcrypt.compare(password, user.password);
      if (checkPass) {
        delete user.password;
        req.session.user = { ...user };
        req.session.save(() => {
          res.status(200).json(user);
        });
      } else {
        res.status(401).json({ err: { pass: '–Ω–µ –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' } });
      }
    }
  } catch (error) {
    res.status(500).json({ err: { server: '–æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' } });
  }
});

router.get('/logout', (req, res) => {
  req.session.destroy(() => {
    res.clearCookie('Cookie');
    res.sendStatus(200);
  });
});

router.post('/checkmail', secureRoute, async (req, res) => {
  try {
    const { email } = req.body
    console.log('üöÄ ~ router.post ~ email:', email)
    const reqEmail = await User.findOne({ where: { email } })
    console.log('üöÄ ~ router.post ~ reqEmail:', reqEmail)
    if (reqEmail) {
      res.json(true)
    } else {
      res.json(false)
    }
  } catch (error) {
    console.log(error);
    res.status(500).json({ err: { server: '–æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' } });
  }
});

router.post('/checkPass', secureRoute, async (req, res) => {
  try {
    const { email, password } = req.body
    const reqUser = await User.findOne({ where: { email } })
    if (reqUser) {
      const user = reqUser.get({ plain: true });
      const checkPass = await bcrypt.compare(password, user.password);
      if (checkPass) {
        res.json(true)
      } else {
        res.json(false)
      }
    } else {
      res.json('False')
    }
  } catch (error) {
    console.log(error);
    res.status(500).json({ err: { server: '–æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' } });
  }
});

module.exports = router;
